Welcome to the KDLP grading program!

This is currently only intended for use with P0.

SUBMISSIONS_DIR:
Each level of P0 should have its own directory within the SUBMISSIONS_DIR (which can be specified in config.py).

Each level should contain compiled binaries of the student submissions from each corresponding level.
Student A's compiled binary at level 0 completion should be in the same directory as Student B's submission for level 0 completion, Student C's level 0, and so on.

The specific names you give the test levels is unimportant, the only thing that matters is that the names of the levels in the TESTSFILE exactly matches the names of the directories in SUBMISSIONS_DIR.

TESTFILE:
The complete suite of tests should be put into the TESTSFILE. TESTSFILE should be a json file. The format is simple:
{
  "LevelName0" : ["Array", "full", "of", "tests", "for", "LevelName0"],
  "LevelName1" : ["Array", "full", "of", "tests", "for", "LevelName0"],
  ...
}

Since P0 is all about making a shell, individidual tests within a level take the form of a string. This string represents input into the shell.
Using a shell involves entering a command and pressing enter: to replicate that with this testing program, write your command into that string, then type '\n' to denote a newline.
At certain levels, you may want to test inputting several commands in a row. For example, you might issue the following set of commands in your shell...
$ mkdir /tmp/example
$ echo hello > /tmp/example/file.txt
$ cat /tmp/example/file.txt
The corresponding string for use in this test program is:
"mkdir /tmp/example\necho hello > /tmp/example/file.txt\ncat /tmp/example/file.txt\n"

The current implementation of inputting new commands from within the grading program has some minor quirks:
1. If you want the entire test string to be just "q" with no trailing newline, this is not possible.
    Inputting q and pressing enter is how you quit that menu. You would have to manually add this to your json TESTSFILE if you really wanted it.
2. The "create new tests" input menu may be counterintuitive when it comes to escaping characters: the only escape character that is accounted for is the string "\n" which is turned into a single
    newline character through simple string substitution. If you want to write a backslash ("\") character into a test, you do not need to escape this like you would within
    a programming language ("\\").
    Quote characters do not need to be escaped within the grading program, but do need to be escaped if writing directly into the JSON with a text editor.

OKFILE:
The OKFILE is a json file that stores which submissions have test outputs that manually get marked as OK or NOT OK.
If something is implemented incorrectly by a student, but it just so happens that is shares output with one of the known good binaries, that test should be manually marked as NOT OK.
If a student's output very closely matches one or more of the good binaries, but is slightly off by whitespace or something, it can be manually marked as OK.
    Alternatively, compile new versions of the known good programs that account for minor, insignifcant differences. Do this at your own discretion!
